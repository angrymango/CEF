// Copyright (c) 2011 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// A portion of this file was generated by the CEF translator tool.  When
// making changes by hand only do so within the body of existing static and
// virtual method implementations. See the translator.README.txt file in the
// tools directory for more information.
//

#include "libcef_dll/ctocpp/response_ctocpp.h"
#include "libcef_dll/transfer_util.h"


// VIRTUAL METHODS - Body may be edited by hand.

int CefResponseCToCpp::GetStatus()
{
  if(CEF_MEMBER_MISSING(struct_, get_status))
    return 0;
  
  return struct_->get_status(struct_);
}

void CefResponseCToCpp::SetStatus(int status)
{
  if(CEF_MEMBER_MISSING(struct_, set_status))
    return;

  struct_->set_status(struct_, status);
}

CefString CefResponseCToCpp::GetStatusText()
{
  CefString str;
  if(CEF_MEMBER_MISSING(struct_, get_status_text))
    return str;
  
  cef_string_userfree_t strPtr = struct_->get_status_text(struct_);
  str.AttachToUserFree(strPtr);
  return str;
}

void CefResponseCToCpp::SetStatusText(const CefString& statusText)
{
  if(CEF_MEMBER_MISSING(struct_, set_status_text))
    return;

  struct_->set_status_text(struct_, statusText.GetStruct());
}

CefString CefResponseCToCpp::GetMimeType()
{
  CefString str;
  if(CEF_MEMBER_MISSING(struct_, get_mime_type))
    return str;
  
  cef_string_userfree_t strPtr = struct_->get_mime_type(struct_);
  str.AttachToUserFree(strPtr);
  return str;
}

void CefResponseCToCpp::SetMimeType(const CefString& mimeType)
{
  if(CEF_MEMBER_MISSING(struct_, set_mime_type))
    return;

  struct_->set_mime_type(struct_, mimeType.GetStruct());
}

CefString CefResponseCToCpp::GetHeader(const CefString& name)
{
  CefString str;
  if(CEF_MEMBER_MISSING(struct_, get_header))
    return str;
  
  cef_string_userfree_t strPtr = struct_->get_header(struct_, name.GetStruct());
  str.AttachToUserFree(strPtr);
  return str;
}

void CefResponseCToCpp::GetHeaderMap(HeaderMap& headerMap)
{
  if(CEF_MEMBER_MISSING(struct_, get_header_map))
    return;

  cef_string_map_t map = cef_string_map_alloc();
  if(!map)
    return;

  struct_->get_header_map(struct_, map);
  transfer_string_map_contents(map, headerMap);
  cef_string_map_free(map);
}

void CefResponseCToCpp::SetHeaderMap(const HeaderMap& headerMap)
{
  if(CEF_MEMBER_MISSING(struct_, set_header_map))
    return;

  cef_string_map_t map = NULL;
  if(!headerMap.empty()) {
    map = cef_string_map_alloc();
    if(!map)
      return;
    transfer_string_map_contents(headerMap, map);
  }

  struct_->set_header_map(struct_, map);
  
  if(map)
    cef_string_map_free(map);
}


#ifndef NDEBUG
template<> long CefCToCpp<CefResponseCToCpp, CefResponse,
    cef_response_t>::DebugObjCt = 0;
#endif

