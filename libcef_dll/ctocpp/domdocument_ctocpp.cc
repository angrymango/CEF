// Copyright (c) 2010 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// A portion of this file was generated by the CEF translator tool.  When
// making changes by hand only do so within the body of existing static and
// virtual method implementations. See the translator.README.txt file in the
// tools directory for more information.
//

#include "libcef_dll/ctocpp/domdocument_ctocpp.h"
#include "libcef_dll/ctocpp/domnode_ctocpp.h"


// VIRTUAL METHODS - Body may be edited by hand.

CefDOMDocument::Type CefDOMDocumentCToCpp::GetType()
{
  if(CEF_MEMBER_MISSING(struct_, get_type))
    return DOM_DOCUMENT_TYPE_UNKNOWN;
  
  return struct_->get_type(struct_);
}

CefRefPtr<CefDOMNode> CefDOMDocumentCToCpp::GetDocument()
{
  if(CEF_MEMBER_MISSING(struct_, get_document))
    return NULL;
  
  cef_domnode_t* nodeStruct = struct_->get_document(struct_);
  if (nodeStruct)
    return CefDOMNodeCToCpp::Wrap(nodeStruct);
  return NULL;
}

CefRefPtr<CefDOMNode> CefDOMDocumentCToCpp::GetBody()
{
  if(CEF_MEMBER_MISSING(struct_, get_body))
    return NULL;

  cef_domnode_t* nodeStruct = struct_->get_body(struct_);
  if (nodeStruct)
    return CefDOMNodeCToCpp::Wrap(nodeStruct);
  return NULL;
}

CefRefPtr<CefDOMNode> CefDOMDocumentCToCpp::GetHead()
{
  if(CEF_MEMBER_MISSING(struct_, get_head))
    return NULL;

  cef_domnode_t* nodeStruct = struct_->get_head(struct_);
  if (nodeStruct)
    return CefDOMNodeCToCpp::Wrap(nodeStruct);
  return NULL;
}

CefString CefDOMDocumentCToCpp::GetTitle()
{
  CefString str;
  if(CEF_MEMBER_MISSING(struct_, get_title))
    return str;

  cef_string_userfree_t strPtr = struct_->get_title(struct_);
  str.AttachToUserFree(strPtr);
  return str;
}

CefRefPtr<CefDOMNode> CefDOMDocumentCToCpp::GetElementById(const CefString& id)
{
  if(CEF_MEMBER_MISSING(struct_, get_element_by_id))
    return NULL;

  cef_domnode_t* nodeStruct =
      struct_->get_element_by_id(struct_, id.GetStruct());
  if (nodeStruct)
    return CefDOMNodeCToCpp::Wrap(nodeStruct);
  return NULL;
}

CefRefPtr<CefDOMNode> CefDOMDocumentCToCpp::GetFocusedNode()
{
  if(CEF_MEMBER_MISSING(struct_, get_focused_node))
    return NULL;

  cef_domnode_t* nodeStruct = struct_->get_focused_node(struct_);
  if (nodeStruct)
    return CefDOMNodeCToCpp::Wrap(nodeStruct);
  return NULL;
}

bool CefDOMDocumentCToCpp::HasSelection()
{
  if(CEF_MEMBER_MISSING(struct_, has_selection))
    return false;

  return struct_->has_selection(struct_) ? true : false;
}

CefRefPtr<CefDOMNode> CefDOMDocumentCToCpp::GetSelectionStartNode()
{
  if(CEF_MEMBER_MISSING(struct_, get_selection_start_node))
    return NULL;

  cef_domnode_t* nodeStruct = struct_->get_selection_start_node(struct_);
  if (nodeStruct)
    return CefDOMNodeCToCpp::Wrap(nodeStruct);
  return NULL;
}

int CefDOMDocumentCToCpp::GetSelectionStartOffset()
{
  if(CEF_MEMBER_MISSING(struct_, get_selection_start_offset))
    return 0;

  return struct_->get_selection_start_offset(struct_);
}

CefRefPtr<CefDOMNode> CefDOMDocumentCToCpp::GetSelectionEndNode()
{
  if(CEF_MEMBER_MISSING(struct_, get_selection_end_node))
    return NULL;

  cef_domnode_t* nodeStruct = struct_->get_selection_end_node(struct_);
  if (nodeStruct)
    return CefDOMNodeCToCpp::Wrap(nodeStruct);
  return NULL;
}

int CefDOMDocumentCToCpp::GetSelectionEndOffset()
{
  if(CEF_MEMBER_MISSING(struct_, get_selection_end_offset))
    return 0;

  return struct_->get_selection_end_offset(struct_);
}

CefString CefDOMDocumentCToCpp::GetSelectionAsMarkup()
{
  CefString str;
  if(CEF_MEMBER_MISSING(struct_, get_selection_as_markup))
    return str;

  cef_string_userfree_t strPtr = struct_->get_selection_as_markup(struct_);
  str.AttachToUserFree(strPtr);
  return str;
}

CefString CefDOMDocumentCToCpp::GetSelectionAsText()
{
  CefString str;
  if(CEF_MEMBER_MISSING(struct_, get_selection_as_text))
    return str;

  cef_string_userfree_t strPtr = struct_->get_selection_as_text(struct_);
  str.AttachToUserFree(strPtr);
  return str;
}

CefString CefDOMDocumentCToCpp::GetBaseURL()
{
  CefString str;
  if(CEF_MEMBER_MISSING(struct_, get_base_url))
    return str;

  cef_string_userfree_t strPtr = struct_->get_base_url(struct_);
  str.AttachToUserFree(strPtr);
  return str;
}

CefString CefDOMDocumentCToCpp::GetCompleteURL(const CefString& partialURL)
{
  CefString str;
  if(CEF_MEMBER_MISSING(struct_, get_complete_url))
    return str;

  cef_string_userfree_t strPtr =
      struct_->get_complete_url(struct_, partialURL.GetStruct());
  str.AttachToUserFree(strPtr);
  return str;
}


#ifdef _DEBUG
template<> long CefCToCpp<CefDOMDocumentCToCpp, CefDOMDocument,
    cef_domdocument_t>::DebugObjCt = 0;
#endif

