// Copyright (c) 2011 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// A portion of this file was generated by the CEF translator tool.  When
// making changes by hand only do so within the body of existing static and
// virtual method implementations. See the translator.README.txt file in the
// tools directory for more information.
//

#include "libcef_dll/cpptoc/browser_cpptoc.h"
#include "libcef_dll/cpptoc/frame_cpptoc.h"
#include "libcef_dll/ctocpp/display_handler_ctocpp.h"


// VIRTUAL METHODS - Body may be edited by hand.

void CefDisplayHandlerCToCpp::OnNavStateChange(CefRefPtr<CefBrowser> browser,
    bool canGoBack, bool canGoForward)
{
  if (CEF_MEMBER_MISSING(struct_, on_nav_state_change))
    return;

  struct_->on_nav_state_change(struct_, CefBrowserCppToC::Wrap(browser),
      canGoBack, canGoForward);
}

void CefDisplayHandlerCToCpp::OnAddressChange(CefRefPtr<CefBrowser> browser,
    CefRefPtr<CefFrame> frame, const CefString& url)
{
  if (CEF_MEMBER_MISSING(struct_, on_address_change))
    return;

  struct_->on_address_change(struct_, CefBrowserCppToC::Wrap(browser),
      CefFrameCppToC::Wrap(frame), url.GetStruct());
}

void CefDisplayHandlerCToCpp::OnTitleChange(CefRefPtr<CefBrowser> browser,
    const CefString& title)
{
  if (CEF_MEMBER_MISSING(struct_, on_title_change))
    return;

  struct_->on_title_change(struct_, CefBrowserCppToC::Wrap(browser),
      title.GetStruct());
}

bool CefDisplayHandlerCToCpp::OnTooltip(CefRefPtr<CefBrowser> browser,
    CefString& text)
{
  if (CEF_MEMBER_MISSING(struct_, on_tooltip))
    return false;

  return struct_->on_tooltip(struct_,  CefBrowserCppToC::Wrap(browser),
      text.GetWritableStruct()) ? true : false;
}

void CefDisplayHandlerCToCpp::OnStatusMessage(CefRefPtr<CefBrowser> browser,
    const CefString& value, StatusType type)
{
  if (CEF_MEMBER_MISSING(struct_, on_status_message))
    return;

  struct_->on_status_message(struct_, CefBrowserCppToC::Wrap(browser),
      value.GetStruct(), type);
}

bool CefDisplayHandlerCToCpp::OnConsoleMessage(CefRefPtr<CefBrowser> browser,
    const CefString& message, const CefString& source, int line)
{
  if (CEF_MEMBER_MISSING(struct_, on_console_message))
    return false;

  return struct_->on_console_message(struct_, CefBrowserCppToC::Wrap(browser),
      message.GetStruct(), source.GetStruct(), line) ? true : false;
}


#ifndef NDEBUG
template<> long CefCToCpp<CefDisplayHandlerCToCpp, CefDisplayHandler,
    cef_display_handler_t>::DebugObjCt = 0;
#endif

