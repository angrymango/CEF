// Copyright (c) 2011 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// A portion of this file was generated by the CEF translator tool.  When
// making changes by hand only do so within the body of existing static and
// virtual method implementations. See the translator.README.txt file in the
// tools directory for more information.
//

#include "libcef_dll/cpptoc/browser_cpptoc.h"
#include "libcef_dll/cpptoc/frame_cpptoc.h"
#include "libcef_dll/ctocpp/load_handler_ctocpp.h"


// VIRTUAL METHODS - Body may be edited by hand.

void CefLoadHandlerCToCpp::OnLoadStart(CefRefPtr<CefBrowser> browser,
    CefRefPtr<CefFrame> frame)
{
  if (CEF_MEMBER_MISSING(struct_, on_load_start))
    return;

  struct_->on_load_start(struct_, CefBrowserCppToC::Wrap(browser),
      CefFrameCppToC::Wrap(frame));
}

void CefLoadHandlerCToCpp::OnLoadEnd(CefRefPtr<CefBrowser> browser,
    CefRefPtr<CefFrame> frame, int httpStatusCode)
{
  if (CEF_MEMBER_MISSING(struct_, on_load_end))
    return;

  struct_->on_load_end(struct_, CefBrowserCppToC::Wrap(browser),
      CefFrameCppToC::Wrap(frame), httpStatusCode);
}

bool CefLoadHandlerCToCpp::OnLoadError(CefRefPtr<CefBrowser> browser,
    CefRefPtr<CefFrame> frame, ErrorCode errorCode, const CefString& failedUrl,
    CefString& errorText)
{
  if (CEF_MEMBER_MISSING(struct_, on_load_error))
    return false;

  return struct_->on_load_error(struct_, CefBrowserCppToC::Wrap(browser),
      CefFrameCppToC::Wrap(frame), errorCode, failedUrl.GetStruct(),
      errorText.GetWritableStruct()) ? true : false;
}


#ifndef NDEBUG
template<> long CefCToCpp<CefLoadHandlerCToCpp, CefLoadHandler,
    cef_load_handler_t>::DebugObjCt = 0;
#endif

