// Copyright (c) 2010 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// -------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//

#ifndef _DOMNODE_CTOCPP_H
#define _DOMNODE_CTOCPP_H

#ifndef USING_CEF_SHARED
#pragma message("Warning: "__FILE__" may be accessed wrapper-side only")
#else // USING_CEF_SHARED

#include "include/cef.h"
#include "include/cef_capi.h"
#include "libcef_dll/ctocpp/ctocpp.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed wrapper-side only.
class CefDOMNodeCToCpp
    : public CefCToCpp<CefDOMNodeCToCpp, CefDOMNode, cef_domnode_t>
{
public:
  CefDOMNodeCToCpp(cef_domnode_t* str)
      : CefCToCpp<CefDOMNodeCToCpp, CefDOMNode, cef_domnode_t>(str) {}
  virtual ~CefDOMNodeCToCpp() {}

  // CefDOMNode methods
  virtual Type GetType();
  virtual bool IsText();
  virtual bool IsElement();
  virtual bool IsSame(CefRefPtr<CefDOMNode> that);
  virtual CefString GetName();
  virtual CefString GetValue();
  virtual bool SetValue(const CefString& value);
  virtual CefString GetAsMarkup();
  virtual CefRefPtr<CefDOMDocument> GetDocument();
  virtual CefRefPtr<CefDOMNode> GetParent();
  virtual CefRefPtr<CefDOMNode> GetPreviousSibling();
  virtual CefRefPtr<CefDOMNode> GetNextSibling();
  virtual bool HasChildren();
  virtual CefRefPtr<CefDOMNode> GetFirstChild();
  virtual CefRefPtr<CefDOMNode> GetLastChild();
  virtual void AddEventListener(const CefString& eventType,
      CefRefPtr<CefDOMEventListener> listener, bool useCapture);
  virtual CefString GetElementTagName();
  virtual bool HasElementAttributes();
  virtual bool HasElementAttribute(const CefString& attrName);
  virtual CefString GetElementAttribute(const CefString& attrName);
  virtual void GetElementAttributes(AttributeMap& attrMap);
  virtual bool SetElementAttribute(const CefString& attrName,
      const CefString& value);
  virtual CefString GetElementInnerText();
};

#endif // USING_CEF_SHARED
#endif // _DOMNODE_CTOCPP_H

