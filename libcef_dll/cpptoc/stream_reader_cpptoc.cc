// Copyright (c) 2009 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// A portion of this file was generated by the CEF translator tool.  When
// making changes by hand only do so within the body of existing function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "../precompiled_libcef.h"
#include "cpptoc/stream_reader_cpptoc.h"
#include "ctocpp/read_handler_ctocpp.h"


// GLOBAL FUNCTIONS - Body may be edited by hand.

CEF_EXPORT cef_stream_reader_t* cef_stream_reader_create_for_file(
    const wchar_t* fileName)
{
  std::wstring filenamestr;
  if(fileName)
    filenamestr = fileName;
  CefRefPtr<CefStreamReader> impl = CefStreamReader::CreateForFile(filenamestr);
  if(impl.get())
    return CefStreamReaderCppToC::Wrap(impl);
  return NULL;
}

CEF_EXPORT cef_stream_reader_t* cef_stream_reader_create_for_data(void* data,
    size_t size)
{
  CefRefPtr<CefStreamReader> impl = CefStreamReader::CreateForData(data, size);
  if(impl.get())
    return CefStreamReaderCppToC::Wrap(impl);
  return NULL;
}

CEF_EXPORT cef_stream_reader_t* cef_stream_reader_create_for_handler(
    cef_read_handler_t* handler)
{
  CefRefPtr<CefStreamReader> impl =
      CefStreamReader::CreateForHandler(CefReadHandlerCToCpp::Wrap(handler));
  if(impl.get())
    return CefStreamReaderCppToC::Wrap(impl);
  return NULL;
}


// MEMBER FUNCTIONS - Body may be edited by hand.

size_t CEF_CALLBACK stream_reader_read(struct _cef_stream_reader_t* self,
    void* ptr, size_t size, size_t n)
{
  DCHECK(self);
  if(!self)
    return 0;

  return CefStreamReaderCppToC::Get(self)->Read(ptr, size, n);
}

int CEF_CALLBACK stream_reader_seek(struct _cef_stream_reader_t* self,
    long offset, int whence)
{
  DCHECK(self);
  if(!self)
    return 0;

  return CefStreamReaderCppToC::Get(self)->Seek(offset, whence);
}

long CEF_CALLBACK stream_reader_tell(struct _cef_stream_reader_t* self)
{
  DCHECK(self);
  if(!self)
    return 0;

  return CefStreamReaderCppToC::Get(self)->Tell();
}

int CEF_CALLBACK stream_reader_eof(struct _cef_stream_reader_t* self)
{
  DCHECK(self);
  if(!self)
    return 0;

  return CefStreamReaderCppToC::Get(self)->Eof();
}


// CONSTRUCTOR - Do not edit by hand.

CefStreamReaderCppToC::CefStreamReaderCppToC(CefStreamReader* cls)
    : CefCppToC<CefStreamReaderCppToC, CefStreamReader, cef_stream_reader_t>(
        cls)
{
  struct_.struct_.read = stream_reader_read;
  struct_.struct_.seek = stream_reader_seek;
  struct_.struct_.tell = stream_reader_tell;
  struct_.struct_.eof = stream_reader_eof;
}

#ifdef _DEBUG
long CefCppToC<CefStreamReaderCppToC, CefStreamReader,
    cef_stream_reader_t>::DebugObjCt = 0;
#endif

