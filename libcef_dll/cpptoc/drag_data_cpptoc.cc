// Copyright (c) 2011 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// A portion of this file was generated by the CEF translator tool.  When
// making changes by hand only do so within the body of existing function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/drag_data_cpptoc.h"
#include "libcef_dll/transfer_util.h"


// MEMBER FUNCTIONS - Body may be edited by hand.

int CEF_CALLBACK drag_data_is_link(struct _cef_drag_data_t* self)
{
  DCHECK(self);
  if (!self)
    return 0;

  return CefDragDataCppToC::Get(self)->IsLink();
}

int CEF_CALLBACK drag_data_is_fragment(struct _cef_drag_data_t* self)
{
  DCHECK(self);
  if (!self)
    return 0;

  return CefDragDataCppToC::Get(self)->IsFragment();
}

int CEF_CALLBACK drag_data_is_file(struct _cef_drag_data_t* self)
{
  DCHECK(self);
  if (!self)
    return 0;

  return CefDragDataCppToC::Get(self)->IsFile();
}

cef_string_userfree_t CEF_CALLBACK drag_data_get_link_url(
    struct _cef_drag_data_t* self)
{
  DCHECK(self);
  if (!self)
    return NULL;

  CefString str = CefDragDataCppToC::Get(self)->GetLinkURL();
  return str.DetachToUserFree();
}

cef_string_userfree_t CEF_CALLBACK drag_data_get_link_title(
    struct _cef_drag_data_t* self)
{
  DCHECK(self);
  if (!self)
    return NULL;

  CefString str = CefDragDataCppToC::Get(self)->GetLinkTitle();
  return str.DetachToUserFree();
}

cef_string_userfree_t CEF_CALLBACK drag_data_get_link_metadata(
    struct _cef_drag_data_t* self)
{
  DCHECK(self);
  if (!self)
    return NULL;

  CefString str = CefDragDataCppToC::Get(self)->GetLinkMetadata();
  return str.DetachToUserFree();
}

cef_string_userfree_t CEF_CALLBACK drag_data_get_fragment_text(
    struct _cef_drag_data_t* self)
{
  DCHECK(self);
  if (!self)
    return NULL;

  CefString str = CefDragDataCppToC::Get(self)->GetFragmentText();
  return str.DetachToUserFree();
}

cef_string_userfree_t CEF_CALLBACK drag_data_get_fragment_html(
    struct _cef_drag_data_t* self)
{
  DCHECK(self);
  if (!self)
    return NULL;

  CefString str = CefDragDataCppToC::Get(self)->GetFragmentHtml();
  return str.DetachToUserFree();
}

cef_string_userfree_t CEF_CALLBACK drag_data_get_fragment_base_url(
    struct _cef_drag_data_t* self)
{
  DCHECK(self);
  if (!self)
    return NULL;

  CefString str = CefDragDataCppToC::Get(self)->GetFragmentBaseURL();
  return str.DetachToUserFree();
}

cef_string_userfree_t CEF_CALLBACK drag_data_get_file_extension(
    struct _cef_drag_data_t* self)
{
  DCHECK(self);
  if (!self)
    return NULL;

  CefString str = CefDragDataCppToC::Get(self)->GetFileExtension();
  return str.DetachToUserFree();
}

cef_string_userfree_t CEF_CALLBACK drag_data_get_file_name(
    struct _cef_drag_data_t* self)
{
  DCHECK(self);
  if (!self)
    return NULL;

  CefString str = CefDragDataCppToC::Get(self)->GetFileName();
  return str.DetachToUserFree();
}

int CEF_CALLBACK drag_data_get_file_names(struct _cef_drag_data_t* self,
    cef_string_list_t names)
{
  DCHECK(self);
  if (!self)
    return 0;

  StringList file_names;
  if (CefDragDataCppToC::Get(self)->GetFileNames(file_names)) {
    transfer_string_list_contents(file_names, names);
    return 1;
  }

  return 0;
}


// CONSTRUCTOR - Do not edit by hand.

CefDragDataCppToC::CefDragDataCppToC(CefDragData* cls)
    : CefCppToC<CefDragDataCppToC, CefDragData, cef_drag_data_t>(cls)
{
  struct_.struct_.is_link = drag_data_is_link;
  struct_.struct_.is_fragment = drag_data_is_fragment;
  struct_.struct_.is_file = drag_data_is_file;
  struct_.struct_.get_link_url = drag_data_get_link_url;
  struct_.struct_.get_link_title = drag_data_get_link_title;
  struct_.struct_.get_link_metadata = drag_data_get_link_metadata;
  struct_.struct_.get_fragment_text = drag_data_get_fragment_text;
  struct_.struct_.get_fragment_html = drag_data_get_fragment_html;
  struct_.struct_.get_fragment_base_url = drag_data_get_fragment_base_url;
  struct_.struct_.get_file_extension = drag_data_get_file_extension;
  struct_.struct_.get_file_name = drag_data_get_file_name;
  struct_.struct_.get_file_names = drag_data_get_file_names;
}

#ifndef NDEBUG
template<> long CefCppToC<CefDragDataCppToC, CefDragData,
    cef_drag_data_t>::DebugObjCt = 0;
#endif

