// Copyright (c) 2010 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// A portion of this file was generated by the CEF translator tool.  When
// making changes by hand only do so within the body of existing function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/v8accessor_cpptoc.h"
#include "libcef_dll/ctocpp/v8value_ctocpp.h"


// MEMBER FUNCTIONS - Body may be edited by hand.

int CEF_CALLBACK v8accessor_get(struct _cef_v8accessor_t* self,
    const cef_string_t* name, struct _cef_v8value_t* object,
    struct _cef_v8value_t** retval)
{
  DCHECK(self);
  if(!self)
    return 0;

  CefRefPtr<CefV8Value> objectPtr;
  if(object)
    objectPtr = CefV8ValueCToCpp::Wrap(object);

  CefRefPtr<CefV8Value> retValPtr;
  bool rv = CefV8AccessorCppToC::Get(self)->Get(CefString(name), objectPtr,
                                                retValPtr);
  if(rv) {
    if(retValPtr.get() && retval)
      *retval = CefV8ValueCToCpp::Unwrap(retValPtr);
  }

  return rv;
}

int CEF_CALLBACK v8accessor_set(struct _cef_v8accessor_t* self,
    const cef_string_t* name, struct _cef_v8value_t* object,
    struct _cef_v8value_t* value)
{
  DCHECK(self);
  if(!self)
    return 0;

  CefRefPtr<CefV8Value> objectPtr;
  if(object)
    objectPtr = CefV8ValueCToCpp::Wrap(object);

  CefRefPtr<CefV8Value> valuePtr;
  if(value)
    valuePtr = CefV8ValueCToCpp::Wrap(value);

  bool rv = CefV8AccessorCppToC::Get(self)->Set(CefString(name), objectPtr,
                                                valuePtr);
  return rv;
}


// CONSTRUCTOR - Do not edit by hand.

CefV8AccessorCppToC::CefV8AccessorCppToC(CefV8Accessor* cls)
    : CefCppToC<CefV8AccessorCppToC, CefV8Accessor, cef_v8accessor_t>(cls)
{
  struct_.struct_.get = v8accessor_get;
  struct_.struct_.set = v8accessor_set;
}

#ifdef _DEBUG
template<> long CefCppToC<CefV8AccessorCppToC, CefV8Accessor,
    cef_v8accessor_t>::DebugObjCt = 0;
#endif

