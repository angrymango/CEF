// Copyright (c) 2010 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// A portion of this file was generated by the CEF translator tool.  When
// making changes by hand only do so within the body of existing function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/response_cpptoc.h"
#include "libcef_dll/transfer_util.h"


// MEMBER FUNCTIONS - Body may be edited by hand.

int CEF_CALLBACK response_get_status(struct _cef_response_t* self)
{
  DCHECK(self);
  if(!self)
    return 0;

  return CefResponseCppToC::Get(self)->GetStatus();
}

cef_string_userfree_t CEF_CALLBACK response_get_status_text(
    struct _cef_response_t* self)
{
  DCHECK(self);
  if(!self)
    return NULL;

  CefString text = CefResponseCppToC::Get(self)->GetStatusText();
  return text.DetachToUserFree();
}

cef_string_userfree_t CEF_CALLBACK response_get_header(
    struct _cef_response_t* self, const cef_string_t* name)
{
  DCHECK(self);
  if(!self)
    return NULL;

  CefString text = CefResponseCppToC::Get(self)->GetHeader(CefString(name));
  return text.DetachToUserFree();
}

void CEF_CALLBACK response_get_header_map(struct _cef_response_t* self,
    cef_string_map_t headerMap)
{
  DCHECK(self);
  if(!self)
    return;

  CefResponse::HeaderMap map;
  CefResponseCppToC::Get(self)->GetHeaderMap(map);
  transfer_string_map_contents(map, headerMap);
}


// CONSTRUCTOR - Do not edit by hand.

CefResponseCppToC::CefResponseCppToC(CefResponse* cls)
    : CefCppToC<CefResponseCppToC, CefResponse, cef_response_t>(cls)
{
  struct_.struct_.get_status = response_get_status;
  struct_.struct_.get_status_text = response_get_status_text;
  struct_.struct_.get_header = response_get_header;
  struct_.struct_.get_header_map = response_get_header_map;
}

#ifdef _DEBUG
template<> long CefCppToC<CefResponseCppToC, CefResponse,
    cef_response_t>::DebugObjCt = 0;
#endif

