// Copyright (c) 2011 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// A portion of this file was generated by the CEF translator tool.  When
// making changes by hand only do so within the body of existing function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/display_handler_cpptoc.h"
#include "libcef_dll/ctocpp/browser_ctocpp.h"
#include "libcef_dll/ctocpp/frame_ctocpp.h"


// MEMBER FUNCTIONS - Body may be edited by hand.

void CEF_CALLBACK display_handler_on_nav_state_change(
    struct _cef_display_handler_t* self, cef_browser_t* browser, int canGoBack,
    int canGoForward)
{
  DCHECK(self);
  DCHECK(browser);
  if (!self || !browser)
    return;

  CefDisplayHandlerCppToC::Get(self)->OnNavStateChange(
      CefBrowserCToCpp::Wrap(browser), (canGoBack?true:false),
      (canGoForward?true:false));
}

void CEF_CALLBACK display_handler_on_address_change(
    struct _cef_display_handler_t* self, cef_browser_t* browser,
    cef_frame_t* frame, const cef_string_t* url)
{
  DCHECK(self);
  DCHECK(browser);
  DCHECK(frame);
  DCHECK(url);
  if (!self || !browser || !frame || !url)
    return;

  CefDisplayHandlerCppToC::Get(self)->OnAddressChange(
      CefBrowserCToCpp::Wrap(browser), CefFrameCToCpp::Wrap(frame),
      CefString(url));
}

void CEF_CALLBACK display_handler_on_title_change(
    struct _cef_display_handler_t* self, cef_browser_t* browser,
    const cef_string_t* title)
{
  DCHECK(self);
  DCHECK(browser);
  if (!self || !browser)
    return;

  CefDisplayHandlerCppToC::Get(self)->OnTitleChange(
      CefBrowserCToCpp::Wrap(browser), CefString(title));
}

int CEF_CALLBACK display_handler_on_tooltip(struct _cef_display_handler_t* self,
    cef_browser_t* browser, cef_string_t* text)
{
  DCHECK(self);
  DCHECK(browser);
  if (!self || !browser)
    return 0;

  CefString textStr(text);
  return CefDisplayHandlerCppToC::Get(self)->OnTooltip(
      CefBrowserCToCpp::Wrap(browser), textStr);
}

void CEF_CALLBACK display_handler_on_status_message(
    struct _cef_display_handler_t* self, cef_browser_t* browser,
    const cef_string_t* value, enum cef_handler_statustype_t type)
{
  DCHECK(self);
  DCHECK(browser);
  if (!self || !browser)
    return;

  CefDisplayHandlerCppToC::Get(self)->OnStatusMessage(
      CefBrowserCToCpp::Wrap(browser), CefString(value), type);
}

int CEF_CALLBACK display_handler_on_console_message(
    struct _cef_display_handler_t* self, cef_browser_t* browser,
    const cef_string_t* message, const cef_string_t* source, int line)
{
  DCHECK(self);
  DCHECK(browser);
  DCHECK(message);
  if (!self || !browser || !message)
    return 0;

  return CefDisplayHandlerCppToC::Get(self)->OnConsoleMessage(
      CefBrowserCToCpp::Wrap(browser), CefString(message), CefString(source),
      line);
}


// CONSTRUCTOR - Do not edit by hand.

CefDisplayHandlerCppToC::CefDisplayHandlerCppToC(CefDisplayHandler* cls)
    : CefCppToC<CefDisplayHandlerCppToC, CefDisplayHandler,
        cef_display_handler_t>(cls)
{
  struct_.struct_.on_nav_state_change = display_handler_on_nav_state_change;
  struct_.struct_.on_address_change = display_handler_on_address_change;
  struct_.struct_.on_title_change = display_handler_on_title_change;
  struct_.struct_.on_tooltip = display_handler_on_tooltip;
  struct_.struct_.on_status_message = display_handler_on_status_message;
  struct_.struct_.on_console_message = display_handler_on_console_message;
}

#ifndef NDEBUG
template<> long CefCppToC<CefDisplayHandlerCppToC, CefDisplayHandler,
    cef_display_handler_t>::DebugObjCt = 0;
#endif

