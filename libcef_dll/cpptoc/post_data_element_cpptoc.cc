// Copyright (c) 2009 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// A portion of this file was generated by the CEF translator tool.  When
// making changes by hand only do so within the body of existing function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "../precompiled_libcef.h"
#include "cpptoc/post_data_element_cpptoc.h"


// GLOBAL FUNCTIONS - Body may be edited by hand.

CEF_EXPORT cef_post_data_element_t* cef_post_data_element_create()
{
  CefRefPtr<CefPostDataElement> impl =
      CefPostDataElement::CreatePostDataElement();
  if(impl.get())
    return CefPostDataElementCppToC::Wrap(impl);
  return NULL;
}


// MEMBER FUNCTIONS - Body may be edited by hand.

void CEF_CALLBACK post_data_element_set_to_empty(
    struct _cef_post_data_element_t* self)
{
  DCHECK(self);
  if(!self)
    return;

  CefPostDataElementCppToC::Get(self)->SetToEmpty();
}

void CEF_CALLBACK post_data_element_set_to_file(
    struct _cef_post_data_element_t* self, const wchar_t* fileName)
{
  DCHECK(self);
  if(!self)
    return;

  std::wstring fileNameStr;
  if(fileName)
    fileNameStr = fileName;

  CefPostDataElementCppToC::Get(self)->SetToFile(fileNameStr);
}

void CEF_CALLBACK post_data_element_set_to_bytes(
    struct _cef_post_data_element_t* self, size_t size, const void* bytes)
{
  DCHECK(self);
  if(!self)
    return;

  CefPostDataElementCppToC::Get(self)->SetToBytes(size, bytes);
}

enum cef_postdataelement_type_t CEF_CALLBACK post_data_element_get_type(
    struct _cef_post_data_element_t* self)
{
  DCHECK(self);
  if(!self)
    return PDE_TYPE_EMPTY;

  return CefPostDataElementCppToC::Get(self)->GetType();
}

cef_string_t CEF_CALLBACK post_data_element_get_file(
    struct _cef_post_data_element_t* self)
{
  DCHECK(self);
  if(!self)
    return NULL;

  std::wstring fileNameStr =
      CefPostDataElementCppToC::Get(self)->GetFile();
  if(!fileNameStr.empty())
    return cef_string_alloc(fileNameStr.c_str());
  return NULL;
}

size_t CEF_CALLBACK post_data_element_get_bytes_count(
    struct _cef_post_data_element_t* self)
{
  DCHECK(self);
  if(!self)
    return 0;

  return CefPostDataElementCppToC::Get(self)->GetBytesCount();
}

size_t CEF_CALLBACK post_data_element_get_bytes(
    struct _cef_post_data_element_t* self, size_t size, void* bytes)
{
  DCHECK(self);
  if(!self)
    return 0;

  return CefPostDataElementCppToC::Get(self)->GetBytes(size, bytes);
}


// CONSTRUCTOR - Do not edit by hand.

CefPostDataElementCppToC::CefPostDataElementCppToC(CefPostDataElement* cls)
    : CefCppToC<CefPostDataElementCppToC, CefPostDataElement,
        cef_post_data_element_t>(cls)
{
  struct_.struct_.set_to_empty = post_data_element_set_to_empty;
  struct_.struct_.set_to_file = post_data_element_set_to_file;
  struct_.struct_.set_to_bytes = post_data_element_set_to_bytes;
  struct_.struct_.get_type = post_data_element_get_type;
  struct_.struct_.get_file = post_data_element_get_file;
  struct_.struct_.get_bytes_count = post_data_element_get_bytes_count;
  struct_.struct_.get_bytes = post_data_element_get_bytes;
}

#ifdef _DEBUG
long CefCppToC<CefPostDataElementCppToC, CefPostDataElement,
    cef_post_data_element_t>::DebugObjCt = 0;
#endif

