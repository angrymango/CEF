// Copyright (c) 2010 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// A portion of this file was generated by the CEF translator tool.  When
// making changes by hand only do so within the body of existing function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/domdocument_cpptoc.h"
#include "libcef_dll/cpptoc/domevent_cpptoc.h"
#include "libcef_dll/cpptoc/domnode_cpptoc.h"


// MEMBER FUNCTIONS - Body may be edited by hand.

cef_string_userfree_t CEF_CALLBACK domevent_get_type(
    struct _cef_domevent_t* self)
{
  DCHECK(self);
  if(!self)
    return NULL;

  CefString str = CefDOMEventCppToC::Get(self)->GetType();
  return str.DetachToUserFree();
}

enum cef_dom_event_category_t CEF_CALLBACK domevent_get_category(
    struct _cef_domevent_t* self)
{
  DCHECK(self);
  if(!self)
    return DOM_EVENT_CATEGORY_UNKNOWN;

  return CefDOMEventCppToC::Get(self)->GetCategory();
}

enum cef_dom_event_phase_t CEF_CALLBACK domevent_get_phase(
    struct _cef_domevent_t* self)
{
  DCHECK(self);
  if(!self)
    return DOM_EVENT_PHASE_UNKNOWN;

  return CefDOMEventCppToC::Get(self)->GetPhase();
}

int CEF_CALLBACK domevent_can_bubble(struct _cef_domevent_t* self)
{
  DCHECK(self);
  if(!self)
    return 0;

  return CefDOMEventCppToC::Get(self)->CanBubble();
}

int CEF_CALLBACK domevent_can_cancel(struct _cef_domevent_t* self)
{
  DCHECK(self);
  if(!self)
    return 0;

  return CefDOMEventCppToC::Get(self)->CanCancel();
}

cef_domdocument_t* CEF_CALLBACK domevent_get_document(
    struct _cef_domevent_t* self)
{
  DCHECK(self);
  if(!self)
    return NULL;

  CefRefPtr<CefDOMDocument> documentPtr =
      CefDOMEventCppToC::Get(self)->GetDocument();
  if (documentPtr.get())
    return CefDOMDocumentCppToC::Wrap(documentPtr);
  return NULL;
}

cef_domnode_t* CEF_CALLBACK domevent_get_target(struct _cef_domevent_t* self)
{
  DCHECK(self);
  if(!self)
    return NULL;

  CefRefPtr<CefDOMNode> nodePtr = CefDOMEventCppToC::Get(self)->GetTarget();
  if (nodePtr.get())
    return CefDOMNodeCppToC::Wrap(nodePtr);
  return NULL;
}

cef_domnode_t* CEF_CALLBACK domevent_get_current_target(
    struct _cef_domevent_t* self)
{
  DCHECK(self);
  if(!self)
    return NULL;

  CefRefPtr<CefDOMNode> nodePtr =
      CefDOMEventCppToC::Get(self)->GetCurrentTarget();
  if (nodePtr.get())
    return CefDOMNodeCppToC::Wrap(nodePtr);
  return NULL;
}


// CONSTRUCTOR - Do not edit by hand.

CefDOMEventCppToC::CefDOMEventCppToC(CefDOMEvent* cls)
    : CefCppToC<CefDOMEventCppToC, CefDOMEvent, cef_domevent_t>(cls)
{
  struct_.struct_.get_type = domevent_get_type;
  struct_.struct_.get_category = domevent_get_category;
  struct_.struct_.get_phase = domevent_get_phase;
  struct_.struct_.can_bubble = domevent_can_bubble;
  struct_.struct_.can_cancel = domevent_can_cancel;
  struct_.struct_.get_document = domevent_get_document;
  struct_.struct_.get_target = domevent_get_target;
  struct_.struct_.get_current_target = domevent_get_current_target;
}

#ifdef _DEBUG
template<> long CefCppToC<CefDOMEventCppToC, CefDOMEvent,
    cef_domevent_t>::DebugObjCt = 0;
#endif

